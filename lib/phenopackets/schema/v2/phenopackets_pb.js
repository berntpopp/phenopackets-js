// source: phenopackets/schema/v2/phenopackets.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var phenopackets_schema_v2_core_base_pb = require('../../../phenopackets/schema/v2/core/base_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_base_pb);
var phenopackets_schema_v2_core_biosample_pb = require('../../../phenopackets/schema/v2/core/biosample_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_biosample_pb);
var phenopackets_schema_v2_core_disease_pb = require('../../../phenopackets/schema/v2/core/disease_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_disease_pb);
var phenopackets_schema_v2_core_interpretation_pb = require('../../../phenopackets/schema/v2/core/interpretation_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_interpretation_pb);
var phenopackets_schema_v2_core_individual_pb = require('../../../phenopackets/schema/v2/core/individual_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_individual_pb);
var phenopackets_schema_v2_core_measurement_pb = require('../../../phenopackets/schema/v2/core/measurement_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_measurement_pb);
var phenopackets_schema_v2_core_medical_action_pb = require('../../../phenopackets/schema/v2/core/medical_action_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_medical_action_pb);
var phenopackets_schema_v2_core_meta_data_pb = require('../../../phenopackets/schema/v2/core/meta_data_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_meta_data_pb);
var phenopackets_schema_v2_core_pedigree_pb = require('../../../phenopackets/schema/v2/core/pedigree_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_pedigree_pb);
var phenopackets_schema_v2_core_phenotypic_feature_pb = require('../../../phenopackets/schema/v2/core/phenotypic_feature_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_phenotypic_feature_pb);
goog.exportSymbol('proto.org.phenopackets.schema.v2.Cohort', null, global);
goog.exportSymbol('proto.org.phenopackets.schema.v2.Family', null, global);
goog.exportSymbol('proto.org.phenopackets.schema.v2.Phenopacket', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.phenopackets.schema.v2.Phenopacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.phenopackets.schema.v2.Phenopacket.repeatedFields_, null);
};
goog.inherits(proto.org.phenopackets.schema.v2.Phenopacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.phenopackets.schema.v2.Phenopacket.displayName = 'proto.org.phenopackets.schema.v2.Phenopacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.phenopackets.schema.v2.Family = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.phenopackets.schema.v2.Family.repeatedFields_, null);
};
goog.inherits(proto.org.phenopackets.schema.v2.Family, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.phenopackets.schema.v2.Family.displayName = 'proto.org.phenopackets.schema.v2.Family';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.phenopackets.schema.v2.Cohort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.phenopackets.schema.v2.Cohort.repeatedFields_, null);
};
goog.inherits(proto.org.phenopackets.schema.v2.Cohort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.phenopackets.schema.v2.Cohort.displayName = 'proto.org.phenopackets.schema.v2.Cohort';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.phenopackets.schema.v2.Phenopacket.repeatedFields_ = [3,4,5,6,7,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.toObject = function(opt_includeInstance) {
  return proto.org.phenopackets.schema.v2.Phenopacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.phenopackets.schema.v2.Phenopacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.phenopackets.schema.v2.Phenopacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subject: (f = msg.getSubject()) && phenopackets_schema_v2_core_individual_pb.Individual.toObject(includeInstance, f),
    phenotypicFeaturesList: jspb.Message.toObjectList(msg.getPhenotypicFeaturesList(),
    phenopackets_schema_v2_core_phenotypic_feature_pb.PhenotypicFeature.toObject, includeInstance),
    measurementsList: jspb.Message.toObjectList(msg.getMeasurementsList(),
    phenopackets_schema_v2_core_measurement_pb.Measurement.toObject, includeInstance),
    biosamplesList: jspb.Message.toObjectList(msg.getBiosamplesList(),
    phenopackets_schema_v2_core_biosample_pb.Biosample.toObject, includeInstance),
    interpretationsList: jspb.Message.toObjectList(msg.getInterpretationsList(),
    phenopackets_schema_v2_core_interpretation_pb.Interpretation.toObject, includeInstance),
    diseasesList: jspb.Message.toObjectList(msg.getDiseasesList(),
    phenopackets_schema_v2_core_disease_pb.Disease.toObject, includeInstance),
    medicalActionsList: jspb.Message.toObjectList(msg.getMedicalActionsList(),
    phenopackets_schema_v2_core_medical_action_pb.MedicalAction.toObject, includeInstance),
    filesList: jspb.Message.toObjectList(msg.getFilesList(),
    phenopackets_schema_v2_core_base_pb.File.toObject, includeInstance),
    metaData: (f = msg.getMetaData()) && phenopackets_schema_v2_core_meta_data_pb.MetaData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket}
 */
proto.org.phenopackets.schema.v2.Phenopacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.phenopackets.schema.v2.Phenopacket;
  return proto.org.phenopackets.schema.v2.Phenopacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.phenopackets.schema.v2.Phenopacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket}
 */
proto.org.phenopackets.schema.v2.Phenopacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new phenopackets_schema_v2_core_individual_pb.Individual;
      reader.readMessage(value,phenopackets_schema_v2_core_individual_pb.Individual.deserializeBinaryFromReader);
      msg.setSubject(value);
      break;
    case 3:
      var value = new phenopackets_schema_v2_core_phenotypic_feature_pb.PhenotypicFeature;
      reader.readMessage(value,phenopackets_schema_v2_core_phenotypic_feature_pb.PhenotypicFeature.deserializeBinaryFromReader);
      msg.addPhenotypicFeatures(value);
      break;
    case 4:
      var value = new phenopackets_schema_v2_core_measurement_pb.Measurement;
      reader.readMessage(value,phenopackets_schema_v2_core_measurement_pb.Measurement.deserializeBinaryFromReader);
      msg.addMeasurements(value);
      break;
    case 5:
      var value = new phenopackets_schema_v2_core_biosample_pb.Biosample;
      reader.readMessage(value,phenopackets_schema_v2_core_biosample_pb.Biosample.deserializeBinaryFromReader);
      msg.addBiosamples(value);
      break;
    case 6:
      var value = new phenopackets_schema_v2_core_interpretation_pb.Interpretation;
      reader.readMessage(value,phenopackets_schema_v2_core_interpretation_pb.Interpretation.deserializeBinaryFromReader);
      msg.addInterpretations(value);
      break;
    case 7:
      var value = new phenopackets_schema_v2_core_disease_pb.Disease;
      reader.readMessage(value,phenopackets_schema_v2_core_disease_pb.Disease.deserializeBinaryFromReader);
      msg.addDiseases(value);
      break;
    case 9:
      var value = new phenopackets_schema_v2_core_medical_action_pb.MedicalAction;
      reader.readMessage(value,phenopackets_schema_v2_core_medical_action_pb.MedicalAction.deserializeBinaryFromReader);
      msg.addMedicalActions(value);
      break;
    case 10:
      var value = new phenopackets_schema_v2_core_base_pb.File;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.File.deserializeBinaryFromReader);
      msg.addFiles(value);
      break;
    case 11:
      var value = new phenopackets_schema_v2_core_meta_data_pb.MetaData;
      reader.readMessage(value,phenopackets_schema_v2_core_meta_data_pb.MetaData.deserializeBinaryFromReader);
      msg.setMetaData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.phenopackets.schema.v2.Phenopacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.phenopackets.schema.v2.Phenopacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.phenopackets.schema.v2.Phenopacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      phenopackets_schema_v2_core_individual_pb.Individual.serializeBinaryToWriter
    );
  }
  f = message.getPhenotypicFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      phenopackets_schema_v2_core_phenotypic_feature_pb.PhenotypicFeature.serializeBinaryToWriter
    );
  }
  f = message.getMeasurementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      phenopackets_schema_v2_core_measurement_pb.Measurement.serializeBinaryToWriter
    );
  }
  f = message.getBiosamplesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      phenopackets_schema_v2_core_biosample_pb.Biosample.serializeBinaryToWriter
    );
  }
  f = message.getInterpretationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      phenopackets_schema_v2_core_interpretation_pb.Interpretation.serializeBinaryToWriter
    );
  }
  f = message.getDiseasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      phenopackets_schema_v2_core_disease_pb.Disease.serializeBinaryToWriter
    );
  }
  f = message.getMedicalActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      phenopackets_schema_v2_core_medical_action_pb.MedicalAction.serializeBinaryToWriter
    );
  }
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      phenopackets_schema_v2_core_base_pb.File.serializeBinaryToWriter
    );
  }
  f = message.getMetaData();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      phenopackets_schema_v2_core_meta_data_pb.MetaData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional core.Individual subject = 2;
 * @return {?proto.org.phenopackets.schema.v2.core.Individual}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.getSubject = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.Individual} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_individual_pb.Individual, 2));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.Individual|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
*/
proto.org.phenopackets.schema.v2.Phenopacket.prototype.setSubject = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.clearSubject = function() {
  return this.setSubject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.hasSubject = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated core.PhenotypicFeature phenotypic_features = 3;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.PhenotypicFeature>}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.getPhenotypicFeaturesList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.PhenotypicFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_phenotypic_feature_pb.PhenotypicFeature, 3));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.PhenotypicFeature>} value
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
*/
proto.org.phenopackets.schema.v2.Phenopacket.prototype.setPhenotypicFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.PhenotypicFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.PhenotypicFeature}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.addPhenotypicFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.org.phenopackets.schema.v2.core.PhenotypicFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.clearPhenotypicFeaturesList = function() {
  return this.setPhenotypicFeaturesList([]);
};


/**
 * repeated core.Measurement measurements = 4;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.Measurement>}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.getMeasurementsList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.Measurement>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_measurement_pb.Measurement, 4));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.Measurement>} value
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
*/
proto.org.phenopackets.schema.v2.Phenopacket.prototype.setMeasurementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.Measurement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.Measurement}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.addMeasurements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.org.phenopackets.schema.v2.core.Measurement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.clearMeasurementsList = function() {
  return this.setMeasurementsList([]);
};


/**
 * repeated core.Biosample biosamples = 5;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.Biosample>}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.getBiosamplesList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.Biosample>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_biosample_pb.Biosample, 5));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.Biosample>} value
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
*/
proto.org.phenopackets.schema.v2.Phenopacket.prototype.setBiosamplesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.Biosample=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.addBiosamples = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.org.phenopackets.schema.v2.core.Biosample, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.clearBiosamplesList = function() {
  return this.setBiosamplesList([]);
};


/**
 * repeated core.Interpretation interpretations = 6;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.Interpretation>}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.getInterpretationsList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.Interpretation>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_interpretation_pb.Interpretation, 6));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.Interpretation>} value
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
*/
proto.org.phenopackets.schema.v2.Phenopacket.prototype.setInterpretationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.Interpretation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.Interpretation}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.addInterpretations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.org.phenopackets.schema.v2.core.Interpretation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.clearInterpretationsList = function() {
  return this.setInterpretationsList([]);
};


/**
 * repeated core.Disease diseases = 7;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.Disease>}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.getDiseasesList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.Disease>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_disease_pb.Disease, 7));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.Disease>} value
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
*/
proto.org.phenopackets.schema.v2.Phenopacket.prototype.setDiseasesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.Disease=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.Disease}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.addDiseases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.org.phenopackets.schema.v2.core.Disease, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.clearDiseasesList = function() {
  return this.setDiseasesList([]);
};


/**
 * repeated core.MedicalAction medical_actions = 9;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.MedicalAction>}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.getMedicalActionsList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.MedicalAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_medical_action_pb.MedicalAction, 9));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.MedicalAction>} value
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
*/
proto.org.phenopackets.schema.v2.Phenopacket.prototype.setMedicalActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.MedicalAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.MedicalAction}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.addMedicalActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.org.phenopackets.schema.v2.core.MedicalAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.clearMedicalActionsList = function() {
  return this.setMedicalActionsList([]);
};


/**
 * repeated core.File files = 10;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.File>}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.getFilesList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.File>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_base_pb.File, 10));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.File>} value
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
*/
proto.org.phenopackets.schema.v2.Phenopacket.prototype.setFilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.File=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.File}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.addFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.org.phenopackets.schema.v2.core.File, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.clearFilesList = function() {
  return this.setFilesList([]);
};


/**
 * optional core.MetaData meta_data = 11;
 * @return {?proto.org.phenopackets.schema.v2.core.MetaData}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.getMetaData = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.MetaData} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_meta_data_pb.MetaData, 11));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.MetaData|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
*/
proto.org.phenopackets.schema.v2.Phenopacket.prototype.setMetaData = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket} returns this
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.clearMetaData = function() {
  return this.setMetaData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.Phenopacket.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.phenopackets.schema.v2.Family.repeatedFields_ = [3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.phenopackets.schema.v2.Family.prototype.toObject = function(opt_includeInstance) {
  return proto.org.phenopackets.schema.v2.Family.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.phenopackets.schema.v2.Family} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.phenopackets.schema.v2.Family.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    proband: (f = msg.getProband()) && proto.org.phenopackets.schema.v2.Phenopacket.toObject(includeInstance, f),
    relativesList: jspb.Message.toObjectList(msg.getRelativesList(),
    proto.org.phenopackets.schema.v2.Phenopacket.toObject, includeInstance),
    consanguinousParents: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    pedigree: (f = msg.getPedigree()) && phenopackets_schema_v2_core_pedigree_pb.Pedigree.toObject(includeInstance, f),
    filesList: jspb.Message.toObjectList(msg.getFilesList(),
    phenopackets_schema_v2_core_base_pb.File.toObject, includeInstance),
    metaData: (f = msg.getMetaData()) && phenopackets_schema_v2_core_meta_data_pb.MetaData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.phenopackets.schema.v2.Family}
 */
proto.org.phenopackets.schema.v2.Family.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.phenopackets.schema.v2.Family;
  return proto.org.phenopackets.schema.v2.Family.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.phenopackets.schema.v2.Family} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.phenopackets.schema.v2.Family}
 */
proto.org.phenopackets.schema.v2.Family.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.org.phenopackets.schema.v2.Phenopacket;
      reader.readMessage(value,proto.org.phenopackets.schema.v2.Phenopacket.deserializeBinaryFromReader);
      msg.setProband(value);
      break;
    case 3:
      var value = new proto.org.phenopackets.schema.v2.Phenopacket;
      reader.readMessage(value,proto.org.phenopackets.schema.v2.Phenopacket.deserializeBinaryFromReader);
      msg.addRelatives(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConsanguinousParents(value);
      break;
    case 4:
      var value = new phenopackets_schema_v2_core_pedigree_pb.Pedigree;
      reader.readMessage(value,phenopackets_schema_v2_core_pedigree_pb.Pedigree.deserializeBinaryFromReader);
      msg.setPedigree(value);
      break;
    case 5:
      var value = new phenopackets_schema_v2_core_base_pb.File;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.File.deserializeBinaryFromReader);
      msg.addFiles(value);
      break;
    case 6:
      var value = new phenopackets_schema_v2_core_meta_data_pb.MetaData;
      reader.readMessage(value,phenopackets_schema_v2_core_meta_data_pb.MetaData.deserializeBinaryFromReader);
      msg.setMetaData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.phenopackets.schema.v2.Family.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.phenopackets.schema.v2.Family.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.phenopackets.schema.v2.Family} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.phenopackets.schema.v2.Family.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProband();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.phenopackets.schema.v2.Phenopacket.serializeBinaryToWriter
    );
  }
  f = message.getRelativesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.org.phenopackets.schema.v2.Phenopacket.serializeBinaryToWriter
    );
  }
  f = message.getConsanguinousParents();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPedigree();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      phenopackets_schema_v2_core_pedigree_pb.Pedigree.serializeBinaryToWriter
    );
  }
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      phenopackets_schema_v2_core_base_pb.File.serializeBinaryToWriter
    );
  }
  f = message.getMetaData();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      phenopackets_schema_v2_core_meta_data_pb.MetaData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.org.phenopackets.schema.v2.Family.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.phenopackets.schema.v2.Family} returns this
 */
proto.org.phenopackets.schema.v2.Family.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Phenopacket proband = 2;
 * @return {?proto.org.phenopackets.schema.v2.Phenopacket}
 */
proto.org.phenopackets.schema.v2.Family.prototype.getProband = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.Phenopacket} */ (
    jspb.Message.getWrapperField(this, proto.org.phenopackets.schema.v2.Phenopacket, 2));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.Phenopacket|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.Family} returns this
*/
proto.org.phenopackets.schema.v2.Family.prototype.setProband = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.Family} returns this
 */
proto.org.phenopackets.schema.v2.Family.prototype.clearProband = function() {
  return this.setProband(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.Family.prototype.hasProband = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Phenopacket relatives = 3;
 * @return {!Array<!proto.org.phenopackets.schema.v2.Phenopacket>}
 */
proto.org.phenopackets.schema.v2.Family.prototype.getRelativesList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.Phenopacket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.phenopackets.schema.v2.Phenopacket, 3));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.Phenopacket>} value
 * @return {!proto.org.phenopackets.schema.v2.Family} returns this
*/
proto.org.phenopackets.schema.v2.Family.prototype.setRelativesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.Phenopacket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket}
 */
proto.org.phenopackets.schema.v2.Family.prototype.addRelatives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.org.phenopackets.schema.v2.Phenopacket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.Family} returns this
 */
proto.org.phenopackets.schema.v2.Family.prototype.clearRelativesList = function() {
  return this.setRelativesList([]);
};


/**
 * optional bool consanguinous_parents = 7;
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.Family.prototype.getConsanguinousParents = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.phenopackets.schema.v2.Family} returns this
 */
proto.org.phenopackets.schema.v2.Family.prototype.setConsanguinousParents = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional core.Pedigree pedigree = 4;
 * @return {?proto.org.phenopackets.schema.v2.core.Pedigree}
 */
proto.org.phenopackets.schema.v2.Family.prototype.getPedigree = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.Pedigree} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_pedigree_pb.Pedigree, 4));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.Pedigree|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.Family} returns this
*/
proto.org.phenopackets.schema.v2.Family.prototype.setPedigree = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.Family} returns this
 */
proto.org.phenopackets.schema.v2.Family.prototype.clearPedigree = function() {
  return this.setPedigree(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.Family.prototype.hasPedigree = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated core.File files = 5;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.File>}
 */
proto.org.phenopackets.schema.v2.Family.prototype.getFilesList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.File>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_base_pb.File, 5));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.File>} value
 * @return {!proto.org.phenopackets.schema.v2.Family} returns this
*/
proto.org.phenopackets.schema.v2.Family.prototype.setFilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.File=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.File}
 */
proto.org.phenopackets.schema.v2.Family.prototype.addFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.org.phenopackets.schema.v2.core.File, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.Family} returns this
 */
proto.org.phenopackets.schema.v2.Family.prototype.clearFilesList = function() {
  return this.setFilesList([]);
};


/**
 * optional core.MetaData meta_data = 6;
 * @return {?proto.org.phenopackets.schema.v2.core.MetaData}
 */
proto.org.phenopackets.schema.v2.Family.prototype.getMetaData = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.MetaData} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_meta_data_pb.MetaData, 6));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.MetaData|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.Family} returns this
*/
proto.org.phenopackets.schema.v2.Family.prototype.setMetaData = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.Family} returns this
 */
proto.org.phenopackets.schema.v2.Family.prototype.clearMetaData = function() {
  return this.setMetaData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.Family.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.phenopackets.schema.v2.Cohort.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.toObject = function(opt_includeInstance) {
  return proto.org.phenopackets.schema.v2.Cohort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.phenopackets.schema.v2.Cohort} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.phenopackets.schema.v2.Cohort.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.org.phenopackets.schema.v2.Phenopacket.toObject, includeInstance),
    filesList: jspb.Message.toObjectList(msg.getFilesList(),
    phenopackets_schema_v2_core_base_pb.File.toObject, includeInstance),
    metaData: (f = msg.getMetaData()) && phenopackets_schema_v2_core_meta_data_pb.MetaData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.phenopackets.schema.v2.Cohort}
 */
proto.org.phenopackets.schema.v2.Cohort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.phenopackets.schema.v2.Cohort;
  return proto.org.phenopackets.schema.v2.Cohort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.phenopackets.schema.v2.Cohort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.phenopackets.schema.v2.Cohort}
 */
proto.org.phenopackets.schema.v2.Cohort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.org.phenopackets.schema.v2.Phenopacket;
      reader.readMessage(value,proto.org.phenopackets.schema.v2.Phenopacket.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 4:
      var value = new phenopackets_schema_v2_core_base_pb.File;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.File.deserializeBinaryFromReader);
      msg.addFiles(value);
      break;
    case 5:
      var value = new phenopackets_schema_v2_core_meta_data_pb.MetaData;
      reader.readMessage(value,phenopackets_schema_v2_core_meta_data_pb.MetaData.deserializeBinaryFromReader);
      msg.setMetaData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.phenopackets.schema.v2.Cohort.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.phenopackets.schema.v2.Cohort} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.phenopackets.schema.v2.Cohort.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.org.phenopackets.schema.v2.Phenopacket.serializeBinaryToWriter
    );
  }
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      phenopackets_schema_v2_core_base_pb.File.serializeBinaryToWriter
    );
  }
  f = message.getMetaData();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      phenopackets_schema_v2_core_meta_data_pb.MetaData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.phenopackets.schema.v2.Cohort} returns this
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.phenopackets.schema.v2.Cohort} returns this
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Phenopacket members = 3;
 * @return {!Array<!proto.org.phenopackets.schema.v2.Phenopacket>}
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.Phenopacket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.phenopackets.schema.v2.Phenopacket, 3));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.Phenopacket>} value
 * @return {!proto.org.phenopackets.schema.v2.Cohort} returns this
*/
proto.org.phenopackets.schema.v2.Cohort.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.Phenopacket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.Phenopacket}
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.org.phenopackets.schema.v2.Phenopacket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.Cohort} returns this
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};


/**
 * repeated core.File files = 4;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.File>}
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.getFilesList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.File>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_base_pb.File, 4));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.File>} value
 * @return {!proto.org.phenopackets.schema.v2.Cohort} returns this
*/
proto.org.phenopackets.schema.v2.Cohort.prototype.setFilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.File=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.File}
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.addFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.org.phenopackets.schema.v2.core.File, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.Cohort} returns this
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.clearFilesList = function() {
  return this.setFilesList([]);
};


/**
 * optional core.MetaData meta_data = 5;
 * @return {?proto.org.phenopackets.schema.v2.core.MetaData}
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.getMetaData = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.MetaData} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_meta_data_pb.MetaData, 5));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.MetaData|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.Cohort} returns this
*/
proto.org.phenopackets.schema.v2.Cohort.prototype.setMetaData = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.Cohort} returns this
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.clearMetaData = function() {
  return this.setMetaData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.Cohort.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.org.phenopackets.schema.v2);
