// source: phenopackets/schema/v2/core/biosample.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var phenopackets_schema_v2_core_base_pb = require('../../../../phenopackets/schema/v2/core/base_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_base_pb);
var phenopackets_schema_v2_core_measurement_pb = require('../../../../phenopackets/schema/v2/core/measurement_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_measurement_pb);
var phenopackets_schema_v2_core_phenotypic_feature_pb = require('../../../../phenopackets/schema/v2/core/phenotypic_feature_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_phenotypic_feature_pb);
goog.exportSymbol('proto.org.phenopackets.schema.v2.core.Biosample', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.phenopackets.schema.v2.core.Biosample = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.phenopackets.schema.v2.core.Biosample.repeatedFields_, null);
};
goog.inherits(proto.org.phenopackets.schema.v2.core.Biosample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.phenopackets.schema.v2.core.Biosample.displayName = 'proto.org.phenopackets.schema.v2.core.Biosample';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.phenopackets.schema.v2.core.Biosample.repeatedFields_ = [7,8,15,16,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.toObject = function(opt_includeInstance) {
  return proto.org.phenopackets.schema.v2.core.Biosample.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.phenopackets.schema.v2.core.Biosample} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.phenopackets.schema.v2.core.Biosample.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    individualId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    derivedFromId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sampledTissue: (f = msg.getSampledTissue()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f),
    sampleType: (f = msg.getSampleType()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f),
    phenotypicFeaturesList: jspb.Message.toObjectList(msg.getPhenotypicFeaturesList(),
    phenopackets_schema_v2_core_phenotypic_feature_pb.PhenotypicFeature.toObject, includeInstance),
    measurementsList: jspb.Message.toObjectList(msg.getMeasurementsList(),
    phenopackets_schema_v2_core_measurement_pb.Measurement.toObject, includeInstance),
    taxonomy: (f = msg.getTaxonomy()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f),
    timeOfCollection: (f = msg.getTimeOfCollection()) && phenopackets_schema_v2_core_base_pb.TimeElement.toObject(includeInstance, f),
    histologicalDiagnosis: (f = msg.getHistologicalDiagnosis()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f),
    tumorProgression: (f = msg.getTumorProgression()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f),
    tumorGrade: (f = msg.getTumorGrade()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f),
    pathologicalStage: (f = msg.getPathologicalStage()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f),
    pathologicalTnmFindingList: jspb.Message.toObjectList(msg.getPathologicalTnmFindingList(),
    phenopackets_schema_v2_core_base_pb.OntologyClass.toObject, includeInstance),
    diagnosticMarkersList: jspb.Message.toObjectList(msg.getDiagnosticMarkersList(),
    phenopackets_schema_v2_core_base_pb.OntologyClass.toObject, includeInstance),
    procedure: (f = msg.getProcedure()) && phenopackets_schema_v2_core_base_pb.Procedure.toObject(includeInstance, f),
    filesList: jspb.Message.toObjectList(msg.getFilesList(),
    phenopackets_schema_v2_core_base_pb.File.toObject, includeInstance),
    materialSample: (f = msg.getMaterialSample()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f),
    sampleProcessing: (f = msg.getSampleProcessing()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f),
    sampleStorage: (f = msg.getSampleStorage()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample}
 */
proto.org.phenopackets.schema.v2.core.Biosample.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.phenopackets.schema.v2.core.Biosample;
  return proto.org.phenopackets.schema.v2.core.Biosample.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.phenopackets.schema.v2.core.Biosample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample}
 */
proto.org.phenopackets.schema.v2.core.Biosample.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndividualId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDerivedFromId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setSampledTissue(value);
      break;
    case 6:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setSampleType(value);
      break;
    case 7:
      var value = new phenopackets_schema_v2_core_phenotypic_feature_pb.PhenotypicFeature;
      reader.readMessage(value,phenopackets_schema_v2_core_phenotypic_feature_pb.PhenotypicFeature.deserializeBinaryFromReader);
      msg.addPhenotypicFeatures(value);
      break;
    case 8:
      var value = new phenopackets_schema_v2_core_measurement_pb.Measurement;
      reader.readMessage(value,phenopackets_schema_v2_core_measurement_pb.Measurement.deserializeBinaryFromReader);
      msg.addMeasurements(value);
      break;
    case 9:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setTaxonomy(value);
      break;
    case 10:
      var value = new phenopackets_schema_v2_core_base_pb.TimeElement;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.TimeElement.deserializeBinaryFromReader);
      msg.setTimeOfCollection(value);
      break;
    case 11:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setHistologicalDiagnosis(value);
      break;
    case 12:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setTumorProgression(value);
      break;
    case 13:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setTumorGrade(value);
      break;
    case 14:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setPathologicalStage(value);
      break;
    case 15:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.addPathologicalTnmFinding(value);
      break;
    case 16:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.addDiagnosticMarkers(value);
      break;
    case 17:
      var value = new phenopackets_schema_v2_core_base_pb.Procedure;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.Procedure.deserializeBinaryFromReader);
      msg.setProcedure(value);
      break;
    case 18:
      var value = new phenopackets_schema_v2_core_base_pb.File;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.File.deserializeBinaryFromReader);
      msg.addFiles(value);
      break;
    case 19:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setMaterialSample(value);
      break;
    case 20:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setSampleProcessing(value);
      break;
    case 21:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setSampleStorage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.phenopackets.schema.v2.core.Biosample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.phenopackets.schema.v2.core.Biosample} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.phenopackets.schema.v2.core.Biosample.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndividualId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDerivedFromId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSampledTissue();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getSampleType();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getPhenotypicFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      phenopackets_schema_v2_core_phenotypic_feature_pb.PhenotypicFeature.serializeBinaryToWriter
    );
  }
  f = message.getMeasurementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      phenopackets_schema_v2_core_measurement_pb.Measurement.serializeBinaryToWriter
    );
  }
  f = message.getTaxonomy();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getTimeOfCollection();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      phenopackets_schema_v2_core_base_pb.TimeElement.serializeBinaryToWriter
    );
  }
  f = message.getHistologicalDiagnosis();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getTumorProgression();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getTumorGrade();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getPathologicalStage();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getPathologicalTnmFindingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getDiagnosticMarkersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getProcedure();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      phenopackets_schema_v2_core_base_pb.Procedure.serializeBinaryToWriter
    );
  }
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      phenopackets_schema_v2_core_base_pb.File.serializeBinaryToWriter
    );
  }
  f = message.getMaterialSample();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getSampleProcessing();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getSampleStorage();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string individual_id = 2;
 * @return {string}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getIndividualId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setIndividualId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string derived_from_id = 3;
 * @return {string}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getDerivedFromId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setDerivedFromId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional OntologyClass sampled_tissue = 5;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getSampledTissue = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 5));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setSampledTissue = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearSampledTissue = function() {
  return this.setSampledTissue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.hasSampledTissue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OntologyClass sample_type = 6;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getSampleType = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 6));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setSampleType = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearSampleType = function() {
  return this.setSampleType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.hasSampleType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated PhenotypicFeature phenotypic_features = 7;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.PhenotypicFeature>}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getPhenotypicFeaturesList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.PhenotypicFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_phenotypic_feature_pb.PhenotypicFeature, 7));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.PhenotypicFeature>} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setPhenotypicFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.PhenotypicFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.PhenotypicFeature}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.addPhenotypicFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.org.phenopackets.schema.v2.core.PhenotypicFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearPhenotypicFeaturesList = function() {
  return this.setPhenotypicFeaturesList([]);
};


/**
 * repeated Measurement measurements = 8;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.Measurement>}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getMeasurementsList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.Measurement>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_measurement_pb.Measurement, 8));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.Measurement>} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setMeasurementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.Measurement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.Measurement}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.addMeasurements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.org.phenopackets.schema.v2.core.Measurement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearMeasurementsList = function() {
  return this.setMeasurementsList([]);
};


/**
 * optional OntologyClass taxonomy = 9;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getTaxonomy = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 9));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setTaxonomy = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearTaxonomy = function() {
  return this.setTaxonomy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.hasTaxonomy = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional TimeElement time_of_collection = 10;
 * @return {?proto.org.phenopackets.schema.v2.core.TimeElement}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getTimeOfCollection = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.TimeElement} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.TimeElement, 10));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.TimeElement|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setTimeOfCollection = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearTimeOfCollection = function() {
  return this.setTimeOfCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.hasTimeOfCollection = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional OntologyClass histological_diagnosis = 11;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getHistologicalDiagnosis = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 11));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setHistologicalDiagnosis = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearHistologicalDiagnosis = function() {
  return this.setHistologicalDiagnosis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.hasHistologicalDiagnosis = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional OntologyClass tumor_progression = 12;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getTumorProgression = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 12));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setTumorProgression = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearTumorProgression = function() {
  return this.setTumorProgression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.hasTumorProgression = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional OntologyClass tumor_grade = 13;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getTumorGrade = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 13));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setTumorGrade = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearTumorGrade = function() {
  return this.setTumorGrade(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.hasTumorGrade = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional OntologyClass pathological_stage = 14;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getPathologicalStage = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 14));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setPathologicalStage = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearPathologicalStage = function() {
  return this.setPathologicalStage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.hasPathologicalStage = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * repeated OntologyClass pathological_tnm_finding = 15;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.OntologyClass>}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getPathologicalTnmFindingList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.OntologyClass>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 15));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.OntologyClass>} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setPathologicalTnmFindingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.OntologyClass=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.addPathologicalTnmFinding = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.org.phenopackets.schema.v2.core.OntologyClass, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearPathologicalTnmFindingList = function() {
  return this.setPathologicalTnmFindingList([]);
};


/**
 * repeated OntologyClass diagnostic_markers = 16;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.OntologyClass>}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getDiagnosticMarkersList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.OntologyClass>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 16));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.OntologyClass>} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setDiagnosticMarkersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.OntologyClass=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.addDiagnosticMarkers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.org.phenopackets.schema.v2.core.OntologyClass, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearDiagnosticMarkersList = function() {
  return this.setDiagnosticMarkersList([]);
};


/**
 * optional Procedure procedure = 17;
 * @return {?proto.org.phenopackets.schema.v2.core.Procedure}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getProcedure = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.Procedure} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.Procedure, 17));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.Procedure|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setProcedure = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearProcedure = function() {
  return this.setProcedure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.hasProcedure = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * repeated File files = 18;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.File>}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getFilesList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.File>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_base_pb.File, 18));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.File>} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setFilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.File=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.File}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.addFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.org.phenopackets.schema.v2.core.File, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearFilesList = function() {
  return this.setFilesList([]);
};


/**
 * optional OntologyClass material_sample = 19;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getMaterialSample = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 19));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setMaterialSample = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearMaterialSample = function() {
  return this.setMaterialSample(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.hasMaterialSample = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional OntologyClass sample_processing = 20;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getSampleProcessing = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 20));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setSampleProcessing = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearSampleProcessing = function() {
  return this.setSampleProcessing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.hasSampleProcessing = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional OntologyClass sample_storage = 21;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.getSampleStorage = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 21));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
*/
proto.org.phenopackets.schema.v2.core.Biosample.prototype.setSampleStorage = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Biosample} returns this
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.clearSampleStorage = function() {
  return this.setSampleStorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Biosample.prototype.hasSampleStorage = function() {
  return jspb.Message.getField(this, 21) != null;
};


goog.object.extend(exports, proto.org.phenopackets.schema.v2.core);
