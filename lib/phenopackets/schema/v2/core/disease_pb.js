// source: phenopackets/schema/v2/core/disease.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var phenopackets_schema_v2_core_base_pb = require('../../../../phenopackets/schema/v2/core/base_pb.js');
goog.object.extend(proto, phenopackets_schema_v2_core_base_pb);
goog.exportSymbol('proto.org.phenopackets.schema.v2.core.Disease', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.phenopackets.schema.v2.core.Disease = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.phenopackets.schema.v2.core.Disease.repeatedFields_, null);
};
goog.inherits(proto.org.phenopackets.schema.v2.core.Disease, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.phenopackets.schema.v2.core.Disease.displayName = 'proto.org.phenopackets.schema.v2.core.Disease';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.phenopackets.schema.v2.core.Disease.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.toObject = function(opt_includeInstance) {
  return proto.org.phenopackets.schema.v2.core.Disease.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.phenopackets.schema.v2.core.Disease} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.phenopackets.schema.v2.core.Disease.toObject = function(includeInstance, msg) {
  var f, obj = {
    term: (f = msg.getTerm()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f),
    excluded: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    onset: (f = msg.getOnset()) && phenopackets_schema_v2_core_base_pb.TimeElement.toObject(includeInstance, f),
    resolution: (f = msg.getResolution()) && phenopackets_schema_v2_core_base_pb.TimeElement.toObject(includeInstance, f),
    diseaseStageList: jspb.Message.toObjectList(msg.getDiseaseStageList(),
    phenopackets_schema_v2_core_base_pb.OntologyClass.toObject, includeInstance),
    clinicalTnmFindingList: jspb.Message.toObjectList(msg.getClinicalTnmFindingList(),
    phenopackets_schema_v2_core_base_pb.OntologyClass.toObject, includeInstance),
    primarySite: (f = msg.getPrimarySite()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f),
    laterality: (f = msg.getLaterality()) && phenopackets_schema_v2_core_base_pb.OntologyClass.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.phenopackets.schema.v2.core.Disease}
 */
proto.org.phenopackets.schema.v2.core.Disease.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.phenopackets.schema.v2.core.Disease;
  return proto.org.phenopackets.schema.v2.core.Disease.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.phenopackets.schema.v2.core.Disease} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.phenopackets.schema.v2.core.Disease}
 */
proto.org.phenopackets.schema.v2.core.Disease.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setTerm(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExcluded(value);
      break;
    case 3:
      var value = new phenopackets_schema_v2_core_base_pb.TimeElement;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.TimeElement.deserializeBinaryFromReader);
      msg.setOnset(value);
      break;
    case 4:
      var value = new phenopackets_schema_v2_core_base_pb.TimeElement;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.TimeElement.deserializeBinaryFromReader);
      msg.setResolution(value);
      break;
    case 5:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.addDiseaseStage(value);
      break;
    case 6:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.addClinicalTnmFinding(value);
      break;
    case 7:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setPrimarySite(value);
      break;
    case 8:
      var value = new phenopackets_schema_v2_core_base_pb.OntologyClass;
      reader.readMessage(value,phenopackets_schema_v2_core_base_pb.OntologyClass.deserializeBinaryFromReader);
      msg.setLaterality(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.phenopackets.schema.v2.core.Disease.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.phenopackets.schema.v2.core.Disease} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.phenopackets.schema.v2.core.Disease.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getExcluded();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getOnset();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      phenopackets_schema_v2_core_base_pb.TimeElement.serializeBinaryToWriter
    );
  }
  f = message.getResolution();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      phenopackets_schema_v2_core_base_pb.TimeElement.serializeBinaryToWriter
    );
  }
  f = message.getDiseaseStageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getClinicalTnmFindingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getPrimarySite();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
  f = message.getLaterality();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      phenopackets_schema_v2_core_base_pb.OntologyClass.serializeBinaryToWriter
    );
  }
};


/**
 * optional OntologyClass term = 1;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.getTerm = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 1));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
*/
proto.org.phenopackets.schema.v2.core.Disease.prototype.setTerm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.clearTerm = function() {
  return this.setTerm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.hasTerm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool excluded = 2;
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.getExcluded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.setExcluded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional TimeElement onset = 3;
 * @return {?proto.org.phenopackets.schema.v2.core.TimeElement}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.getOnset = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.TimeElement} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.TimeElement, 3));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.TimeElement|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
*/
proto.org.phenopackets.schema.v2.core.Disease.prototype.setOnset = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.clearOnset = function() {
  return this.setOnset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.hasOnset = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeElement resolution = 4;
 * @return {?proto.org.phenopackets.schema.v2.core.TimeElement}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.getResolution = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.TimeElement} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.TimeElement, 4));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.TimeElement|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
*/
proto.org.phenopackets.schema.v2.core.Disease.prototype.setResolution = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.clearResolution = function() {
  return this.setResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated OntologyClass disease_stage = 5;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.OntologyClass>}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.getDiseaseStageList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.OntologyClass>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 5));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.OntologyClass>} value
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
*/
proto.org.phenopackets.schema.v2.core.Disease.prototype.setDiseaseStageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.OntologyClass=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.addDiseaseStage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.org.phenopackets.schema.v2.core.OntologyClass, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.clearDiseaseStageList = function() {
  return this.setDiseaseStageList([]);
};


/**
 * repeated OntologyClass clinical_tnm_finding = 6;
 * @return {!Array<!proto.org.phenopackets.schema.v2.core.OntologyClass>}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.getClinicalTnmFindingList = function() {
  return /** @type{!Array<!proto.org.phenopackets.schema.v2.core.OntologyClass>} */ (
    jspb.Message.getRepeatedWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 6));
};


/**
 * @param {!Array<!proto.org.phenopackets.schema.v2.core.OntologyClass>} value
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
*/
proto.org.phenopackets.schema.v2.core.Disease.prototype.setClinicalTnmFindingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.org.phenopackets.schema.v2.core.OntologyClass=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.addClinicalTnmFinding = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.org.phenopackets.schema.v2.core.OntologyClass, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.clearClinicalTnmFindingList = function() {
  return this.setClinicalTnmFindingList([]);
};


/**
 * optional OntologyClass primary_site = 7;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.getPrimarySite = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 7));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
*/
proto.org.phenopackets.schema.v2.core.Disease.prototype.setPrimarySite = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.clearPrimarySite = function() {
  return this.setPrimarySite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.hasPrimarySite = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OntologyClass laterality = 8;
 * @return {?proto.org.phenopackets.schema.v2.core.OntologyClass}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.getLaterality = function() {
  return /** @type{?proto.org.phenopackets.schema.v2.core.OntologyClass} */ (
    jspb.Message.getWrapperField(this, phenopackets_schema_v2_core_base_pb.OntologyClass, 8));
};


/**
 * @param {?proto.org.phenopackets.schema.v2.core.OntologyClass|undefined} value
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
*/
proto.org.phenopackets.schema.v2.core.Disease.prototype.setLaterality = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.phenopackets.schema.v2.core.Disease} returns this
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.clearLaterality = function() {
  return this.setLaterality(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.phenopackets.schema.v2.core.Disease.prototype.hasLaterality = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.org.phenopackets.schema.v2.core);
